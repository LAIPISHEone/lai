<template>
  <div>
    <h1>用户管理</h1>
    <el-form :inline="true" :model="searchForm" @submit.native.prevent="fetchUsers">
      <el-form-item label="用户名">
        <el-input v-model="searchForm.username" placeholder="请输入用户名"></el-input>
      </el-form-item>
      <el-form-item label="用户ID">
        <el-input v-model="searchForm.id" placeholder="请输入用户ID"></el-input>
      </el-form-item>
      <el-form-item label="状态">
        <el-select v-model="searchForm.status" placeholder="请选择状态">
          <el-option label="全部" value=""></el-option>
          <el-option label="启用" value="active"></el-option>
          <el-option label="禁用" value="inactive"></el-option>
        </el-select>
      </el-form-item>
      <el-form-item>
        <el-button type="primary" @click="fetchUsers">查询</el-button>
        <el-button type="success" @click="addUser">新增用户</el-button>
      </el-form-item>
    </el-form>

    <el-table :data="users" style="width: 100%">
      <el-table-column prop="id" label="用户ID"></el-table-column>
      <el-table-column prop="username" label="用户名"></el-table-column>
      <el-table-column prop="status" label="状态">
        <template slot-scope="scope">
          <span :style="{ color: scope.row.status === 'active' ? 'green' : 'red' }">
            {{ scope.row.status === 'active' ? '启用' : '禁用' }}
          </span>
        </template>
      </el-table-column>
      <el-table-column label="操作">
        <template slot-scope="scope">
          <el-button size="mini" @click="editUser(scope.$index, scope.row)">修改</el-button>
          <el-button size="mini" type="danger" @click="deleteUser(scope.$index, scope.row)">删除</el-button>
          <el-button size="mini" @click="toggleStatus(scope.$index, scope.row)">
            {{ scope.row.status === 'active' ? '禁用' : '启用' }}
          </el-button>
          <el-button size="mini" @click="changePassword(scope.$index, scope.row)">修改密码</el-button>
        </template>
      </el-table-column>
    </el-table>

    <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      :current-page="pagination.currentPage"
      :page-sizes="[10, 20, 30, 40]"
      :page-size="pagination.pageSize"
      layout="total, sizes, prev, pager, next, jumper"
      :total="pagination.total">
    </el-pagination>

    <!-- 新增/修改用户信息的对话框 -->
    <el-dialog :title="dialogTitle" :visible.sync="dialogVisible" width="50%">
      <el-form :model="userForm" label-width="100px">
        <el-form-item label="用户名">
          <el-input v-model="userForm.username"></el-input>
        </el-form-item>
        <el-form-item label="状态">
          <el-select v-model="userForm.status" placeholder="请选择状态">
            <el-option label="启用" value="active"></el-option>
            <el-option label="禁用" value="inactive"></el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="密码" v-if="dialogTitle === '新增用户'">
          <el-input type="password" v-model="userForm.password"></el-input>
        </el-form-item>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button @click="dialogVisible = false">取 消</el-button>
        <el-button type="primary" @click="saveUser">确 定</el-button>
      </span>
    </el-dialog>

    <!-- 修改密码的对话框 -->
    <el-dialog title="修改密码" :visible.sync="passwordDialogVisible" width="30%">
      <el-form :model="passwordForm" label-width="100px">
        <el-form-item label="新密码">
          <el-input type="password" v-model="passwordForm.newPassword"></el-input>
        </el-form-item>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button @click="passwordDialogVisible = false">取 消</el-button>
        <el-button type="primary" @click="updatePassword">确 定</el-button>
      </span>
    </el-dialog>
  </div>
</template>

<script>
export default {
  data() {
    return {
      searchForm: {
        username: '',
        id: '',
        status: ''
      },
      users: [],
      dialogVisible: false,
      dialogTitle: '',
      userForm: {
        id: '',
        username: '',
        status: '',
        password: ''
      },
      pagination: {
        currentPage: 1,
        pageSize: 10,
        total: 0
      },
      passwordDialogVisible: false,
      passwordForm: {
        userId: '',
        newPassword: ''
      }
    };
  },
  methods: {
    fetchUsers() {
      // 这里需要调用后端接口获取用户信息列表
      console.log('Fetching users with filters:', this.searchForm);
      // 假设后端接口返回的数据格式为 { users: [...], total: ... }
      const response = {
        users: [
          { id: 1, username: 'user1', status: 'active' },
          { id: 2, username: 'user2', status: 'inactive' }
          // 其他用户信息
        ],
        total: 2
      };
      this.users = response.users;
      this.pagination.total = response.total;
    },
    handleSizeChange(newSize) {
      this.pagination.pageSize = newSize;
      this.fetchUsers();
    },
    handleCurrentChange(newPage) {
      this.pagination.currentPage = newPage;
      this.fetchUsers();
    },
    addUser() {
      this.dialogTitle = '新增用户';
      this.dialogVisible = true;
      this.userForm = {
        id: '',
        username: '',
        status: 'active',
        password: ''
      };
    },
    editUser(index, row) {
      this.dialogTitle = '修改用户';
      this.dialogVisible = true;
      this.userForm = { ...row };
    },
    deleteUser(index, row) {
      // 这里需要调用后端接口删除用户信息
      console.log('Deleting user:', row);
      this.users.splice(index, 1);
      this.pagination.total--;
    },
    toggleStatus(index, row) {
      // 这里需要调用后端接口更新用户状态
      console.log('Toggling status for user:', row);
      row.status = row.status === 'active' ? 'inactive' : 'active';
      this.users.splice(index, 1, row);
    },
    changePassword(index, row) {
      this.passwordDialogVisible = true;
      this.passwordForm.userId = row.id;
    },
    saveUser() {
      if (this.dialogTitle === '新增用户') {
        // 这里需要调用后端接口新增用户信息
        console.log('Adding user:', this.userForm);
        this.users.push({ ...this.userForm, id: this.users.length + 1 });
        this.pagination.total++;
      } else {
        // 这里需要调用后端接口修改用户信息
        console.log('Updating user:', this.userForm);
        const index = this.users.findIndex(user => user.id === this.userForm.id);
        if (index !== -1) {
          this.users.splice(index, 1, { ...this.userForm });
        }
      }
      this.dialogVisible = false;
    },
    updatePassword() {
      // 这里需要调用后端接口更新用户密码
      console.log('Updating password for user:', this.passwordForm);
      this.passwordDialogVisible = false;
    }
  },
  created() {
    this.fetchUsers();
  }
};
</script>

<style scoped>
/* 添加样式 */
</style>